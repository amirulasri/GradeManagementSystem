/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package grademanagementsystem;

import javax.swing.JOptionPane;
import GradeException.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;

/**
 *
 * @author amiru
 */
public class GradeSystemUI extends javax.swing.JFrame {

    /**
     * Creates new form GradeSystemUI
     */
    public GradeSystemUI() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GradeSystemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GradeSystemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GradeSystemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GradeSystemUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Grade Management System");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Amirul Asri - SWC3233");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(322, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));

        jButton1.setText("Add new student");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Added Student");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Enroll student in course");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Delete student");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete Course");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton4.setText("Add course");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton7.setText("Read course text file");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Save all student in txt file");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("View Added Course");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("View enrolled student");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Drop student from course");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton8)
                        .addComponent(jButton9))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton10)
                            .addComponent(jButton11))))
                .addGap(18, 18, 18)
                .addComponent(jButton6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // ADD NEW STUDENT
        try {
            // Input Student ID
            String studentID = JOptionPane.showInputDialog("Enter Student ID:");
            // Input Student Name
            String studentName = JOptionPane.showInputDialog("Enter Student Name:");
            if (studentID == null || studentName == null) {
                throw new IncompleteStudentActionException();
            }
            GradeManagementSystem.studentList.add(new Student(studentID, studentName));
            JOptionPane.showMessageDialog(null, "Student added successfully", studentID, JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error adding students", JOptionPane.ERROR_MESSAGE);
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // DISPLAY ALL STUDENT DATA
        try {
            if (GradeManagementSystem.studentList.size() < 1) {
                throw new EmptyStudentDataException();
            }
            StringBuilder message = new StringBuilder("Student List:\n");
            for (Student student : GradeManagementSystem.studentList) {
                message.append("ID: ").append(student.getStudentID()).append("\nName: ").append(student.getStudentName()).append("\n\n");
            }
            JOptionPane.showMessageDialog(null, message.toString());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error display list", JOptionPane.ERROR_MESSAGE);
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // ENROLL STUDENT IN COURSE
        String[] studentIDs = new String[GradeManagementSystem.studentList.size()];
        for (int i = 0; i < GradeManagementSystem.studentList.size(); i++) {
            studentIDs[i] = GradeManagementSystem.studentList.get(i).getStudentID();
        }

        // Create a JComboBox with student IDs
        JComboBox<String> comboBox = new JComboBox<>(studentIDs);

        // Display JOptionPane dialog with the JComboBox
        int selectorStudentID = JOptionPane.showConfirmDialog(null, comboBox, "Select a Student ID", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        // Check if the user selected OK
        if (selectorStudentID == JOptionPane.OK_OPTION) {
            try {
                // Get the selected student's ID
                String selectedStudentIDs = (String) comboBox.getSelectedItem();
                // Find the corresponding Student object
                Student selectedStudent = null;
                int studentIndexSelect = 0;
                for (Student student : GradeManagementSystem.studentList) {
                    if (student.getStudentID().equals(selectedStudentIDs)) {
                        selectedStudent = student;
                        break;
                    }
                    studentIndexSelect++;
                }
                // Display selected student's ID and Name
                if (selectedStudent == null) {
                    throw new StudentNotFoundException();
                }
                JOptionPane.showMessageDialog(null, "Student ID: " + selectedStudent.getStudentID() + "\nStudent Name: " + selectedStudent.getStudentName());

                // COURSE SELECTION
                String[] courseCodes = new String[GradeManagementSystem.courseAvailable.size()];
                for (int i = 0; i < GradeManagementSystem.courseAvailable.size(); i++) {
                    courseCodes[i] = GradeManagementSystem.courseAvailable.get(i).getCourseCode();
                }

                // Create a JComboBox with course codes
                JComboBox<String> comboBox2 = new JComboBox<>(courseCodes);
                // Display JOptionPane dialog with the JComboBox
                int selectorCourseCode = JOptionPane.showConfirmDialog(null, comboBox2, "Select a Course Code to enroll", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

                // Check if the user selected OK
                if (selectorCourseCode == JOptionPane.OK_OPTION) {
                    // Get the selected course codes
                    String selectedCourseCodes = (String) comboBox2.getSelectedItem();
                    // Find the corresponding course object
                    Course selectedCourse = null;
                    for (Course course : GradeManagementSystem.courseAvailable) {
                        if (course.getCourseCode().equals(selectedCourseCodes)) {
                            selectedCourse = course;
                            break;
                        }
                    }
                    // Display selected Course Code
                    if (selectedCourse == null) {
                        throw new CourseNotFoundException();
                    }
                    JOptionPane.showMessageDialog(null, "Course Code: " + selectedCourse.getCourseCode() + "\nCourse Name: " + selectedCourse.getCourseName());
                    // Input Course credits
                    String courseGPA = JOptionPane.showInputDialog("Enter Course GPA in %:");
                    selectedCourse.setCourseGrade(Integer.parseInt(courseGPA));
                    GradeManagementSystem.studentList.get(studentIndexSelect).getListEnrolledCourse().add(selectedCourse);
                    JOptionPane.showMessageDialog(null, "Student enrolled successfully", selectedStudentIDs, JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error assign course", JOptionPane.ERROR_MESSAGE);
                //ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // ADD NEW COURSE
        try {
            // Input Course Code
            String courseCode = JOptionPane.showInputDialog("Enter Course Code:");
            // Input Course Name
            String courseName = JOptionPane.showInputDialog("Enter Course Name:");
            // Input Course Credits
            String courseCredits = JOptionPane.showInputDialog("Enter Course Credits:");
            if (courseCode == null || courseName == null || courseCredits == null) {
                throw new IncompleteCourseActionException();
            }
            GradeManagementSystem.courseAvailable.add(new Course(courseCode, courseName, Integer.parseInt(courseCredits)));
            JOptionPane.showMessageDialog(null, "Course added successfully", courseCode, JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error adding course", JOptionPane.ERROR_MESSAGE);
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // DELETE COURSE
        try {
            // Input Course Code
            String courseCode = JOptionPane.showInputDialog("Enter Course Code:");
            if (courseCode == null) {
                throw new IncompleteCourseActionException();
            }
            GradeManagementSystem.courseAvailable.removeIf(course -> course.getCourseCode().equalsIgnoreCase(courseCode));
            JOptionPane.showMessageDialog(null, "Course removed successfully", courseCode, JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error deleting course", JOptionPane.ERROR_MESSAGE);
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // DELETE STUDENT
        try {
            // Input student ID
            String studentID = JOptionPane.showInputDialog("Enter Student ID:");
            if (studentID == null) {
                throw new IncompleteStudentActionException();
            }
            GradeManagementSystem.studentList.removeIf(student -> student.getStudentID().equalsIgnoreCase(studentID));
            JOptionPane.showMessageDialog(null, "Student removed successfully", studentID, JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error deleting student", JOptionPane.ERROR_MESSAGE);
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // READ COURSE FROM TXT FILE
        try {
            FileReader courseFile = new FileReader("course.txt");
            Scanner scanner = new Scanner(courseFile);
            while (scanner.hasNextLine()) {
                String data = scanner.nextLine();
                StringTokenizer courseData = new StringTokenizer(data, ",");
                if(courseData.countTokens() == 3){
                    String courseCode = courseData.nextToken();
                    String courseName = courseData.nextToken();
                    int courseCredit = Integer.parseInt(courseData.nextToken());
                    GradeManagementSystem.courseAvailable.add(new Course(courseCode, courseName, courseCredit));
                }
            }
            JOptionPane.showMessageDialog(null, "All course from txt file added", "File import", JOptionPane.INFORMATION_MESSAGE);
            jButton7.setEnabled(false);
            scanner.close();
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error open txt file", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            // SAVE STUDENT TO FILE
            PrintWriter writer = new PrintWriter(new FileWriter("student.txt"));
            int studentIndex = 0;
            for(Student eachstudent : GradeManagementSystem.studentList){
                writer.println("Student: " + eachstudent.getStudentName() + " | " + eachstudent.getStudentID());
                writer.println("Course registered with grade:");
                for(Course eachcourseregistered : GradeManagementSystem.studentList.get(studentIndex).getListEnrolledCourse()){
                    writer.println(eachcourseregistered.getCourseCode() + " - " + eachcourseregistered.getCourseName());
                    writer.println("Grade: " + eachcourseregistered.getCourseGrade() + " - " + eachcourseregistered.getCourseGrade());
                }
                writer.println("");
                studentIndex++;
            }
            JOptionPane.showMessageDialog(null, "All student data saved successfully", "Save student to txt file", JOptionPane.INFORMATION_MESSAGE);
            writer.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error saving student data", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // DISPLAY ADDED COURSE
        try {
            if (GradeManagementSystem.courseAvailable.size() < 1) {
                throw new EmptyCourseDataException();
            }
            StringBuilder message = new StringBuilder("Course List:\n");
            for (Course course : GradeManagementSystem.courseAvailable) {
                message.append("Code: ").append(course.getCourseCode()).append("\nName: ").append(course.getCourseName()).append("\nCredits: ").append(course.getCourseCredits()).append("\n\n");
            }
            JOptionPane.showMessageDialog(null, message.toString());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error display list", JOptionPane.ERROR_MESSAGE);
            //ex.printStackTrace();
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // VIEW ENROLLED STUDENT
        String[] studentIDs = new String[GradeManagementSystem.studentList.size()];
        for (int i = 0; i < GradeManagementSystem.studentList.size(); i++) {
            studentIDs[i] = GradeManagementSystem.studentList.get(i).getStudentID();
        }

        // Create a JComboBox with student IDs
        JComboBox<String> comboBox = new JComboBox<>(studentIDs);

        // Display JOptionPane dialog with the JComboBox
        int selectorStudentID = JOptionPane.showConfirmDialog(null, comboBox, "Select a Student ID", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        // Check if the user selected OK
        if (selectorStudentID == JOptionPane.OK_OPTION) {
            try {
                // Get the selected student's ID
                String selectedStudentIDs = (String) comboBox.getSelectedItem();
                // Find the corresponding Student object
                Student selectedStudent = null;
                int studentIndexSelect = 0;
                for (Student student : GradeManagementSystem.studentList) {
                    if (student.getStudentID().equals(selectedStudentIDs)) {
                        selectedStudent = student;
                        break;
                    }
                    studentIndexSelect++;
                }
                // Display selected student's ID and Name
                if (selectedStudent == null) {
                    throw new StudentNotFoundException();
                }
                JOptionPane.showMessageDialog(null, "Student ID: " + selectedStudent.getStudentID() + "\nStudent Name: " + selectedStudentIDs);

                StringBuilder message = new StringBuilder("Course List:\n");
                for (Course course : GradeManagementSystem.studentList.get(studentIndexSelect).getListEnrolledCourse()) {
                    message.append("Code: ").append(course.getCourseCode()).append("\nName: ").append(course.getCourseName()).append("\nCredits: ").append(course.getCourseCredits()).append("\nGrade %: ").append(course.getCourseGrade()).append("\nGrade: ").append(course.getCourseGrade()).append("\n\n");
                }
                JOptionPane.showMessageDialog(null, message.toString());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error Unenroll", JOptionPane.ERROR_MESSAGE);
                //ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // DROP STUDENT FROM COURSE
        String[] studentIDs = new String[GradeManagementSystem.studentList.size()];
        for (int i = 0; i < GradeManagementSystem.studentList.size(); i++) {
            studentIDs[i] = GradeManagementSystem.studentList.get(i).getStudentID();
        }

        // Create a JComboBox with student IDs
        JComboBox<String> comboBox = new JComboBox<>(studentIDs);

        // Display JOptionPane dialog with the JComboBox
        int selectorStudentID = JOptionPane.showConfirmDialog(null, comboBox, "Select a Student ID", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        // Check if the user selected OK
        if (selectorStudentID == JOptionPane.OK_OPTION) {
            try {
                // Get the selected student's ID
                String selectedStudentIDs = (String) comboBox.getSelectedItem();
                // Find the corresponding Student object
                Student selectedStudent = null;
                int studentIndexSelect = 0;
                for (Student student : GradeManagementSystem.studentList) {
                    if (student.getStudentID().equals(selectedStudentIDs)) {
                        selectedStudent = student;
                        break;
                    }
                    studentIndexSelect++;
                }
                // Display selected student's ID and Name
                if (selectedStudent == null) {
                    throw new StudentNotFoundException();
                }
                JOptionPane.showMessageDialog(null, "Student ID: " + selectedStudent.getStudentID() + "\nStudent Name: " + selectedStudentIDs);

                // COURSE SELECTION
                String[] courseCodes = new String[GradeManagementSystem.studentList.get(studentIndexSelect).getListEnrolledCourse().size()];
                for (int i = 0; i < GradeManagementSystem.studentList.get(studentIndexSelect).getListEnrolledCourse().size(); i++) {
                    courseCodes[i] = GradeManagementSystem.studentList.get(studentIndexSelect).getListEnrolledCourse().get(i).getCourseCode();
                }

                // Create a JComboBox with course codes
                JComboBox<String> comboBox2 = new JComboBox<>(courseCodes);
                // Display JOptionPane dialog with the JComboBox
                int selectorCourseCode = JOptionPane.showConfirmDialog(null, comboBox2, "Select a Course Code to enroll", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

                // Check if the user selected OK
                if (selectorCourseCode == JOptionPane.OK_OPTION) {
                    // Get the selected course codes
                    String selectedCourseCodes = (String) comboBox2.getSelectedItem();
                    // Find the corresponding course object
                    Course selectedCourse = null;
                    for (Course course : GradeManagementSystem.courseAvailable) {
                        if (course.getCourseCode().equals(selectedCourseCodes)) {
                            selectedCourse = course;
                            break;
                        }
                    }
                    // Display selected Course Code
                    if (selectedCourse == null) {
                        throw new CourseNotFoundException();
                    }
                    JOptionPane.showMessageDialog(null, "Course Code: " + selectedCourse.getCourseCode() + "\nCourse Name: " + selectedCourse.getCourseName(), "Will dropped from", JOptionPane.INFORMATION_MESSAGE);
                    GradeManagementSystem.studentList.get(studentIndexSelect).getListEnrolledCourse().removeIf(course -> course.getCourseCode().equalsIgnoreCase(selectedCourseCodes));
                    JOptionPane.showMessageDialog(null, "Student unenrolled successfully", selectedStudentIDs, JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error Unenroll", JOptionPane.ERROR_MESSAGE);
                //ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton11ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
